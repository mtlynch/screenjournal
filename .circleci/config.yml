version: 2.1
executors:
  base:
    docker:
      - image: cimg/base:stable
  go:
    docker:
      # cimg version wasn't available at upgrade time.
      - image: golang:1.23.3
jobs:
  check_whitespace:
    executor: go
    resource_class: small
    steps:
      - checkout
      - run:
          name: Check for trailing whitespace
          command: ./dev-scripts/check-trailing-whitespace
      - run:
          name: Check that all text files end in a trailing newline
          command: ./dev-scripts/check-trailing-newline
  check_bash:
    docker:
      - image: koalaman/shellcheck-alpine:v0.9.0
    steps:
      - run:
          name: Install dependencies needed to check out repo
          command: apk add bash git openssh-client grep
      - checkout
      - run:
          name: Run static analysis on bash scripts
          command: ./dev-scripts/check-bash
  check_frontend:
    docker:
      - image: cimg/node:20.6.1
    steps:
      - checkout
      - run:
          name: Download npm packages
          command: npm install
      - run:
          name: Check formatting
          command: npm run check-format
      - run:
          name: Check lint
          command: npm run lint
  test_go:
    executor: go
    resource_class: medium
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - restore_cache:
          keys:
            - go-test-mod-v1-{{ checksum "go.sum" }}
      - run:
          name: Test go packages
          command: dev-scripts/run-go-tests --full
      - store_artifacts:
          path: .coverage.html
      - run:
          name: Verify golang formatting
          command: dev-scripts/check-go-formatting
      - save_cache:
          key: go-test-mod-v1-{{ checksum "go.sum" }}
          paths:
            - ~/go/pkg/mod
  build_backend:
    executor: go
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          name: Compile backend (prod)
          command: dev-scripts/build-backend
      - run:
          name: Compile backend (dev)
          command: dev-scripts/build-backend dev
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - ~/go/pkg/mod
      - persist_to_workspace:
          root: ./
          paths:
            - ./bin/screenjournal-dev
  lint_sql:
    docker:
      - image: sqlfluff/sqlfluff:1.2.1
        user: root
    steps:
      - checkout
      - run:
          name: Lint SQL files
          command: ./dev-scripts/lint-sql
  e2e:
    docker:
      - image: mcr.microsoft.com/playwright:v1.40.0-focal
    environment:
      NODE_ENV: development
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies
          command: npm install
      - run:
          name: Run e2e tests
          command: ./dev-scripts/run-e2e-tests --skip-build
      - store_artifacts:
          path: playwright-report
  package_release:
    executor: base
    steps:
      - checkout
      - setup_remote_docker:
          version: docker24
          docker_layer_caching: true
      - run:
          name: Enable multiarch builds with QEMU
          command: ./dev-scripts/enable-multiarch-docker
      - run:
          name: Build binaries
          command: |
            set -eux
            if [[ "${CIRCLE_TAG-''}" =~ ^[0-9]+(\.[0-9]+){2}.*  || \
                  "${CIRCLE_BRANCH}" == 'master' ]]; then
              readonly BUILD_TARGETS='linux/arm/v7,linux/arm64,linux/amd64'
            else
              readonly BUILD_TARGETS='linux/amd64'
            fi
            docker buildx build \
              --platform "${BUILD_TARGETS}" \
              --target=artifact \
              --output "type=local,dest=$(pwd)/bin/" \
              .
      - store_artifacts:
          path: bin
      - run:
          name: Install compress utility for gzip compression
          command: |
            sudo apt-get update
            sudo apt-get install --yes ncompress
      - run:
          name: Package binaries for distribution
          command: |
            set -eux
            VERSION=''
            if [[ "${CIRCLE_TAG-''}" =~ ^[0-9]+(\.[0-9]+){2}.* ]]; then
              VERSION="${CIRCLE_TAG}"
            elif [[ "${CIRCLE_BRANCH}" == 'master' ]]; then
              VERSION="${CIRCLE_SHA1}"
            fi
            readonly VERSION

            if [[ -n "${VERSION}" ]]; then
              ./dev-scripts/package-binaries "${VERSION}"
            else
              echo "Skipping packaging step"
              circleci-agent step halt
            fi
      - persist_to_workspace:
          root: ./
          paths:
            - ./dist
  publish_docker_images:
    executor: base
    environment:
      BUILD_TARGETS: "linux/arm/v7,linux/arm64,linux/amd64"
    steps:
      - checkout
      - setup_remote_docker:
          version: docker24
          docker_layer_caching: true
      - run:
          name: Log in to Docker Hub
          command: |
            echo "${DOCKERHUB_ACCESS_TOKEN}" | \
              docker login --username "${DOCKERHUB_USERNAME}" --password-stdin
      - run:
          name: Enable multiarch builds with QEMU
          command: ./dev-scripts/enable-multiarch-docker
      - run:
          name: Build docker images
          command: |
            docker buildx build \
              --push \
              --platform "$BUILD_TARGETS" \
              --tag mtlynch/screenjournal:latest \
              .
  deploy:
    executor: go
    resource_class: small
    environment:
      # The flyctl changes too much to use a specific version, so use the latest for the
      # time being.
      # https://github.com/superfly/flyctl/issues/394#issuecomment-815890166
      FLYCTL_VERSION: "latest"
    steps:
      - checkout
      - run:
          name: Install flyctl
          command: curl -L https://fly.io/install.sh | sh -s "${FLYCTL_VERSION}"
      - run:
          name: Print flyctl version
          command: |
            "${HOME}/.fly/bin/flyctl" version
      - run:
          name: Deploy to fly.io
          command: |
            "${HOME}/.fly/bin/flyctl" deploy \
              --access-token "${FLY_ACCESS_TOKEN}"
workflows:
  version: 2
  test_deploy:
    jobs:
      - check_whitespace:
          filters:
            tags:
              only: /.*/
      - check_bash:
          filters:
            tags:
              only: /.*/
      - check_frontend:
          filters:
            tags:
              only: /.*/
      - test_go:
          filters:
            tags:
              only: /.*/
      - build_backend:
          filters:
            tags:
              only: /.*/
      - lint_sql:
          filters:
            tags:
              only: /.*/
      - e2e:
          filters:
            tags:
              only: /.*/
          requires:
            - build_backend
      - package_release:
          filters:
            tags:
              only: /.*/
      - publish_docker_images:
          requires:
            - check_whitespace
            - check_bash
            - check_frontend
            - test_go
            - lint_sql
            - build_backend
          filters:
            branches:
              only: master
            tags:
              only: /.*/
      - deploy:
          requires:
            - check_whitespace
            - check_bash
            - check_frontend
            - test_go
            - build_backend
            - e2e
          filters:
            branches:
              only: master
            tags:
              only: /.*/
